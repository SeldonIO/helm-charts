
replicaCount: 1

image:
  image: seldonio/seldon-deploy-server:0.0.0
  pullPolicy: Always

#uncomment below to use imagePullSecrets e.g. to avoid docker rate-limiting
# imagePullSecrets:
#  - name: regcred

applicationLogs:
  elasticIndexPattern: "kubernetes_cluster-*"
  elasticNamespaceField: "kubernetes.namespace_name"
  elasticContainerNameField: "kubernetes.container_name"
  elasticPodNameField: "kubernetes.pod_name"

loadtest:
  image: seldonio/hey-loadtester:0.2

alibidetect:
  image: seldonio/alibi-detect-server:1.15.0

nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 80

# Default user id to add to all Pod Security Context as the default
# Use this to ensure all container run as non-root by default
# For openshift leave blank as usually this will be injected automatically on an openshift cluster
# to all pods.
defaultUserID: "8888"

# boolean to enable app-level auth (defaults to "false")
enableAppAuth: true

# boolean to enable app-analytics (defaults to "true")
enableAppAnalytics: true

env:
  USERID_CLAIM_KEY: "preferred_username" # claim to be used as userid (defaults to "preferred_username")
  OIDC_PROVIDER: "" # oidc issuerURL
  CLIENT_ID: "deploy-server" # oidc client ID
  CLIENT_SECRET: "deploy-secret" # oidc client secret
  REDIRECT_URL: "" #`${oidc_redirect_url}/seldon-deploy/auth/callback`
  OIDC_SCOPES: "profile email groups" #oidc scopes (scope "openid" is added by default)
  # RESOURCE_URI: "" # resource at which access is requested
  # APP_ANALYTICS_TOKEN: "" # if enableAppAnalytics enabled use token
  SELDON_MANAGED_INFRA: "false"
  ALERTMANAGER_URL: "http://seldon-monitoring-alertmanager.seldon-system:9093/api/v1/alerts"

  # Cache duration for listing visible namespaces to Deploy. Higher values improve performance on common operations
  # around listing deployments, but reduce responsiveness to adding new namespaces. Set the value to "0"  to disable
  # namespace caching.
  NAMESPACE_CACHE_DURATION: "2m"

  # Docker image path for reference data forwarder
  REFERENCE_DATA_FORWARDER_IMAGE: "seldonio/reference-data-forwarder:0.3.0"

docker:
  user: "unknown"

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    memory: 800Mi
  requests:
    cpu: 100m
    memory: 200Mi

serviceAccount:
  create: true

gitops:
  git:
    secret: "git-creds"
    #user, token and email can be blank if secret is provided
    user: ""
    email: ""
    token: ""
    skipVerifyGit: true
    webhook:
      service:
        create: true
        loadBalancerSourceRanges: {}
  fileFormat: "json"
  argocd:
    enabled: true
    namespace: argocd

workflow:
  serviceAccount: "workflow"
  securityContext:
    runAsUser: 1000
    fsGroup: 1000

batchjobs:
  processor:
    image: seldonio/seldon-core-s2i-python37:1.15.0
  processorV2:
    image: seldonio/mlserver:1.2.0.dev13-slim
  storageInitializer:
    image: seldonio/rclone-storage-initializer:1.15.0
  pvc:
    defaultSize: 1Gi

seldon:
  protocol: "http"
  enabled: true
  knativeEnabled: true
  #Below are templates that can be changed to adjust how requests are made and what curl option is shown to user.
  #Change ip to hostname on AWS. Or put real cluster IP after install. Shown to user for calls outside cluster.
  curlForm: |
    CLUSTER_IP=$(kubectl -n {{ .IngressNamespace }} get service {{ .IngressServiceName }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')<br>
    curl -k -H "{{ .TokenHeader }}: {{ .Token }} " -H "Content-Type: application/json" {{ .SeldonProtocol }}://$CLUSTER_IP/seldon/{{ .Namespace }}/{{ .ModelName }}/api/v0.1/predictions -d '{{ .Payload }}'
  tensorFlowCurlForm: |
    CLUSTER_IP=$(kubectl -n {{ .IngressNamespace }} get service {{ .IngressServiceName }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')<br>
    curl -k -H "{{ .TokenHeader }}: {{ .Token }} " -H "Content-Type: application/json" {{ .SeldonProtocol }}://$CLUSTER_IP/seldon/{{ .Namespace }}/{{ .ModelName }}/v1/models/:predict -d '{{ .Payload }}'
  #Forms for cluster-internal calls.
  #e.g. could be changed to skip ingress by setting to "http://{{ .ModelName }}-{{ .ModelName }}-{{ .Predictor }}.{{ .Namespace }}:8000/api/v0.1/predictions"
  seldonRequestForm: "{{ .SeldonProtocol }}://{{ .IngressServiceName }}/seldon/{{ .Namespace }}/{{ .ModelName }}/api/v0.1/predictions"
  tensorflowRequestForm: "{{ .SeldonProtocol }}://{{ .IngressServiceName }}/seldon/{{ .Namespace }}/{{ .ModelName }}/v1/models/{{ .GraphModelName }}:predict"
  v2RequestForm: "{{ .SeldonProtocol }}://{{ .IngressServiceName }}/seldon/{{ .Namespace }}/{{ .ModelName }}/v2/models/{{ .GraphModelName }}/infer"
  #explainer call for seldon can go straight to predictor rather than ingress as not worried about loadbalancing a canary
  explainForm: "http://{{ .ModelName }}-{{ .Predictor }}-explainer.{{ .Namespace }}:9000/v1/models/{{ .ModelName }}:explain"
  tensorflowExplainForm: "http://{{ .ModelName }}-{{ .Predictor }}-explainer.{{ .Namespace }}:9000/v1/models/{{ .GraphModelName }}:explain"
  v2ExplainForm: "http://{{ .ModelName }}-{{ .Predictor }}-explainer.{{ .Namespace }}:9000/explain"

seldonCoreV2:
  protocol: "http"
  enabled: true
  curlForm: |
    CLUSTER_IP=$(kubectl -n {{ .IngressNamespace }} get service {{ .IngressServiceName }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')<br>
    curl -v {{ .SeldonProtocol }}://$CLUSTER_IP/v2/models/{{ .ModelName }}/infer -H "Content-Type: application/json" -H "seldon-model: {{ .ModelName }}.pipeline" -d '{{ .Payload }}'
  requestForm: "{{ .SeldonProtocol }}://seldon-mesh.{{ .Namespace }}.svc.cluster.local/v2/pipelines/{{ .ModelName }}/infer"
  explainForm: "{{ .SeldonProtocol }}://seldon-mesh.{{ .Namespace }}.svc.cluster.local/v2/models/{{ .GraphModelName }}/infer"

external:
  protocol: "http"

serviceAccountName: seldon-deploy

ingressGateway:
  seldonIngressService: "istio-ingressgateway"
  ingressNamespace: "istio-system"

virtualService:
  create: true
  prefix: "/seldon-deploy/"
  gateways:
    - istio-system/seldon-gateway

rbac:
  create: true
  #clusterWide rbac is needed for deploy to see and create resources in different namespaces
  clusterWide: true
  #reading namespaces is needed for single deploy to be used across namespaces, even if rbac gets added for each specific namespace
  #for single namespace mode with just namespaced roles, turn off cluserWide and turn off readNamespaces
  readNamespaces: true
  nsLabelsAuth:
    enabled: true
  opa:
    enabled: false
    configMap: seldon-deploy-policies
    projectAuthEnabled: false
    permissionManagementAPIDisabled: false
    # istioPolicySyncInterval configures how often the istio policies for direct model access should be synced with the
    # current OPA permissions. A negative or zero value means the policies won't be synced. A sensible default if you
    # want to sync them is "5m".
    istioPolicySyncInterval: ""

nodeSelector: {}

tolerations: []

affinity: {}

skipVerifyHttpCalls: true


prometheus:
  seldon:
    url: "http://seldon-monitoring-prometheus.seldon-system:9090/api/v1/"
    # resource metrics may come from different prometheus than req metrics - set only if different
    # resourceMetricsUrl: ""
    # see https://github.com/openshift/cluster-monitoring-operator/issues/768
    namespaceMetricName: "namespace"
    activeModelsNamespaceMetricName: "exported_namespace"
    serviceMetricName: "service"
    #leave below empty/commented for prom without token-based auth
    #basic auth can be handled by putting user:pass in url.
    #jwtSecretName: "jwt-elastic"
    #jwtSecretKey: "jwt-seldon.txt"


elasticsearch:
  url: "https://opensearch-cluster-master.seldon-logs.svc.cluster.local:9200"
  #enable below for elastic with user and password
  basicAuth: true
  secret:
    name: "elastic-credentials"
    userKey: "username"
    passwordKey: "password"
  #or instead below for token-based auth
  #jwtSecretName: "jwt-seldon"
  #jwtSecretKey: "jwt-seldon.txt"

#only create request logger if you've not already installed it outside of helm (or first delete existing install)
#if namespace.create is false then assumes namespace existing with a knative broker (kubectl get broker -n seldon-logs)
#detectors are created in the namespace requestLogger.namespace.name so rbac is created there
requestLogger:
  create: true
  image: seldonio/metronome:1.4.1
  #increase logger replicas if there are high traffic volumes
  replicas: 1
  imagePullPolicy: IfNotPresent
  elasticsearch:
    host: "opensearch-cluster-master.seldon-logs.svc.cluster.local"
    port: "9200"
    protocol: "https"
    #jwtSecretName: "jwt-seldon"
    #jwtSecretKey: "jwt-seldon.txt"
  namespace:
    create: false
    name: seldon-logs
  http:
    enabled: true
  kafka_consumer:
    enabled: true
    bootstrap_servers: seldon-kafka-bootstrap.kafka.svc.cluster.local:9092
    group_id: metronome
    auto_offset_reset: earliest

  # env:
    # MAX_PAYLOAD_BYTES: "300000"
  deployHost: "http://seldon-deploy.seldon-system/seldon-deploy/api/v1alpha1"
  authSecret: ""
  trigger:
    apiVersion: "eventing.knative.dev/v1"
    broker: "default"
  resources:
    limits:
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 200Mi

openshiftMarketplace:
  cleanupClusterServiceVersions: false
  kubectlCleanupImage: seldonio/kubectl:1.14.3
  seldonCore:
    subscription:
      create: false
      apiVersion: "operators.coreos.com/v1alpha1"
      channel: "stable"
      metricsPath: "/metrics"
      istioEnabled: true
      requestLoggerEndpoint: "http://broker-ingress.knative-eventing.svc.cluster.local/seldon-logs/default"
    istioGateway:
      create: false
      name: "seldon-gateway"
      namespace: "istio-system"
  prometheus:
    monitorSpecs:
      create: false

metadata:
  pg:
    enabled: false
    secret: "metadata-postgres"
  disableRuntimeMetadata: false
  disableRuntimeWatchers: false
  authorizeModelsByProject: false

audit:
  stdout:
    enabled: false
  fluentd:
    enabled: false
    requireConn: true
    host: audit-fluentd-aggregator.seldon-logs.svc.cluster.local
    port: 24224

featureFlags:
  envPrefix: "SD_FLAG_"
  configMap: "seldon-deploy-feature-flags"

keycloakUserManagement:
  enabled: false
  keycloakBasePath: ""
  username: ""
  password: ""
  masterRealm: "master"
  userRealm: "deploy-realm"
  debug: "true"
  tls_insecure: "false"
