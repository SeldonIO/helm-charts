{{- if .Values.requestLogger.create -}}
{{- if .Values.requestLogger.namespace.create -}}
apiVersion: v1
kind: Namespace
metadata:
  labels:
    knative-eventing-injection: enabled
    app.kubernetes.io/name: {{ include "seldon-deploy.name" . }}
    helm.sh/chart: {{ include "seldon-deploy.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  name: {{ .Values.requestLogger.namespace.name }}
spec:
  finalizers:
    - kubernetes
---
{{- end }}
{{- if .Values.requestLogger.trigger.create -}}
apiVersion: {{ .Values.requestLogger.trigger.apiVersion }}
kind: Trigger
metadata:
  name: seldon-request-logger-trigger
  namespace: {{ .Values.requestLogger.namespace.name }}
  labels:
    app.kubernetes.io/name: {{ include "seldon-deploy.name" . }}
    helm.sh/chart: {{ include "seldon-deploy.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
{{- if .Values.requestLogger.trigger.broker }}
  broker: {{ .Values.requestLogger.trigger.broker }}
{{- end }}
  subscriber:
    ref:
      apiVersion: v1
      kind: Service
      name: seldon-request-logger
---
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: seldon-request-logger
  namespace: {{ .Values.requestLogger.namespace.name }}
  labels:
    app: seldon-request-logger
    app.kubernetes.io/name: {{ include "seldon-deploy.name" . }}
    helm.sh/chart: {{ include "seldon-deploy.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.requestLogger.replicas }}
  selector:
    matchLabels:
      app: seldon-request-logger
  template:
    metadata:
      labels:
        app: seldon-request-logger
    spec:
      containers:
        - name: user-container
          image: "{{ .Values.requestLogger.image }}"
          imagePullPolicy: {{ .Values.requestLogger.imagePullPolicy }}
          env:
            {{- range $key, $value := .Values.requestLogger.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
{{- if .Values.requestLogger.http.enabled }}
            - name: "METRONOME_SERVER_HTTP_PORT"
              value: "8080"
{{- end }}
{{- if .Values.requestLogger.kafka_consumer.enabled -}}
{{- if .Values.requestLogger.kafka_consumer.bootstrap_servers }}
            - name: "METRONOME_SERVER_KAFKA_CONSUMER_BOOTSTRAP_SERVERS"
              value: {{ .Values.requestLogger.kafka_consumer.bootstrap_servers | quote }}
{{- end }}
{{- if .Values.requestLogger.kafka_consumer.group_id }}
            - name: "METRONOME_SERVER_KAFKA_CONSUMER_GROUP_ID"
              value: {{ .Values.requestLogger.kafka_consumer.group_id | quote }}
{{- end }}
{{- if .Values.requestLogger.kafka_consumer.auto_offset_reset }}
            - name: "METRONOME_SERVER_KAFKA_CONSUMER_AUTO_OFFSET_RESET"
              value: {{ .Values.requestLogger.kafka_consumer.auto_offset_reset | quote }}
{{- end -}}
{{- end }}
            - name: ELASTICSEARCH_HOST
              value: {{ .Values.requestLogger.elasticsearch.host | quote }}
            - name: ELASTICSEARCH_PORT
              value: {{ .Values.requestLogger.elasticsearch.port | quote }}
            - name: ELASTICSEARCH_PROTOCOL
              value: {{ .Values.requestLogger.elasticsearch.protocol | quote }}
{{- if .Values.elasticsearch.basicAuth }}
            - name: "ELASTICSEARCH_USER"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.elasticsearch.secret.name }}
                  key: {{ .Values.elasticsearch.secret.userKey }}
            - name: "ELASTICSEARCH_PASS"
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.elasticsearch.secret.name }}
                  key: {{ .Values.elasticsearch.secret.passwordKey }}
{{- end }}
{{- if .Values.requestLogger.elasticsearch.jwtSecretName }}
            - name: ELASTICSEARCH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.requestLogger.elasticsearch.jwtSecretName }}
                  key: {{ .Values.requestLogger.elasticsearch.jwtSecretKey }}
{{- end }}
{{- if and .Values.requestLogger.deployHost .Values.metadata.pg.enabled }}
            - name: DEPLOY_API_HOST
              value: {{ .Values.requestLogger.deployHost | quote }}
{{- end }}
{{- if .Values.requestLogger.kafka_consumer.enabled }}
{{- if or
  (eq .Values.requestLogger.kafka_consumer.protocol "SSL")
  (eq .Values.requestLogger.kafka_consumer.protocol "SASL_SSL")
}}
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SECURITY_PROTOCOL
              value: {{ .Values.requestLogger.kafka_consumer.protocol | quote }}
{{- if (eq .Values.requestLogger.kafka_consumer.protocol "SSL") }}
{{- if .Values.requestLogger.kafka_consumer.ssl.client.secret }}
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SSL_KEY_LOCATION
              value: {{ .Values.requestLogger.kafka_consumer.ssl.client.keyPath | quote }}
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SSL_CERTIFICATE_LOCATION
              value: {{ .Values.requestLogger.kafka_consumer.ssl.client.crtPath | quote }}
{{- end }}
{{- if .Values.requestLogger.kafka_consumer.ssl.client.brokerValidationSecret }}
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SSL_CA_LOCATION
              value: {{ .Values.requestLogger.kafka_consumer.ssl.client.brokerCaPath | quote }}
{{- else }}
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SSL_CA_LOCATION
              value: {{ .Values.requestLogger.kafka_consumer.ssl.client.caPath | quote }}
{{- end }}
{{- end }}
{{- if (eq .Values.requestLogger.kafka_consumer.protocol "SASL_SSL") }}
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SASL_MECHANISM
              value: {{ .Values.requestLogger.kafka_consumer.sasl.mechanism | quote }}
{{- if (eq .Values.requestLogger.kafka_consumer.sasl.mechanism "OAUTHBEARER") }}
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SASL_OAUTHBEARER_METHOD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.requestLogger.kafka_consumer.sasl.client.secret | quote }}
                  key: method
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SASL_OAUTHBEARER_CLIENT_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.requestLogger.kafka_consumer.sasl.client.secret | quote }}
                  key: "client_id"
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SASL_OAUTHBEARER_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.requestLogger.kafka_consumer.sasl.client.secret | quote }}
                  key: "client_secret"
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SASL_OAUTHBEARER_TOKEN_ENDPOINT_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.requestLogger.kafka_consumer.sasl.client.secret | quote }}
                  key: "token_endpoint_url"
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SASL_OAUTHBEARER_EXTENSIONS
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.requestLogger.kafka_consumer.sasl.client.secret | quote }}
                  key: "extensions"
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SASL_OAUTHBEARER_SCOPE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.requestLogger.kafka_consumer.sasl.client.secret | quote }}
                  key: "scope"
{{- else }}
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SASL_USERNAME
              value: {{ .Values.requestLogger.kafka_consumer.sasl.client.username | quote }}
{{- if .Values.requestLogger.kafka_consumer.sasl.client.secret }}
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SASL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.requestLogger.kafka_consumer.sasl.client.secret | quote }}
                  key: {{ base .Values.requestLogger.kafka_consumer.sasl.client.passwordPath | quote }}
{{- end }}
{{- end }}
{{- if .Values.requestLogger.kafka_consumer.ssl.client.brokerValidationSecret }}
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SSL_CA_LOCATION
              value: {{ .Values.requestLogger.kafka_consumer.ssl.client.brokerCaPath | quote }}
{{- else if .Values.requestLogger.kafka_consumer.ssl.client.secret }}
            - name: METRONOME_SERVER_KAFKA_CONSUMER_SSL_CA_LOCATION
              value: {{ .Values.requestLogger.kafka_consumer.ssl.client.caPath | quote }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
          envFrom:
{{- if and .Values.requestLogger.authSecret .Values.metadata.pg.enabled }}
          - secretRef:
              name: {{ .Values.requestLogger.authSecret }}
{{- end }}
          resources:
{{ toYaml .Values.requestLogger.resources | indent 12 }}
{{- if .Values.requestLogger.kafka_consumer.enabled }}
          volumeMounts:
{{- if eq .Values.requestLogger.kafka_consumer.protocol "SSL" }}
{{- if .Values.requestLogger.kafka_consumer.ssl.client.secret }}
            - name: kafka-ssl-client-certs
              mountPath: {{ .Values.requestLogger.kafka_consumer.ssl.client.keyPath }}
              readOnly: true
              subPath: {{ base .Values.requestLogger.kafka_consumer.ssl.client.keyPath }}
            - name: kafka-ssl-client-certs
              mountPath: {{ .Values.requestLogger.kafka_consumer.ssl.client.crtPath }}
              readOnly: true
              subPath: {{ base .Values.requestLogger.kafka_consumer.ssl.client.crtPath }}
            - name: kafka-ssl-client-certs
              mountPath: {{ .Values.requestLogger.kafka_consumer.ssl.client.caPath }}
              readOnly: true
              subPath: {{ base .Values.requestLogger.kafka_consumer.ssl.client.caPath }}
{{- end }}
{{- end }}
{{- if or
  (eq .Values.requestLogger.kafka_consumer.protocol "SSL")
  (eq .Values.requestLogger.kafka_consumer.protocol "SASL_SSL")
}}
{{- if .Values.requestLogger.kafka_consumer.ssl.client.brokerValidationSecret }}
            - name: kafka-ssl-broker-certs
              mountPath: {{ .Values.requestLogger.kafka_consumer.ssl.client.brokerCaPath }}
              readOnly: true
              subPath: {{ base .Values.requestLogger.kafka_consumer.ssl.client.brokerCaPath }}
{{- end }}
{{- end }}
      volumes:
{{- if .Values.requestLogger.kafka_consumer.ssl.client.secret }}
        - name: kafka-ssl-client-certs
          secret:
            secretName: {{ .Values.requestLogger.kafka_consumer.ssl.client.secret }}
{{- end }}
{{- if .Values.requestLogger.kafka_consumer.ssl.client.brokerValidationSecret }}
        - name: kafka-ssl-broker-certs
          secret:
            secretName: {{ .Values.requestLogger.kafka_consumer.ssl.client.brokerValidationSecret }}
{{- end }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: seldon-request-logger
  namespace: {{ .Values.requestLogger.namespace.name }}
  labels:
    app.kubernetes.io/name: {{ include "seldon-deploy.name" . }}
    helm.sh/chart: {{ include "seldon-deploy.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  selector:
    app: seldon-request-logger
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
{{- end -}}
