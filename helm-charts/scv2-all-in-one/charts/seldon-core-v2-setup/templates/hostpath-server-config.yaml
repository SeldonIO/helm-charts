apiVersion: mlops.seldon.io/v1alpha1
kind: ServerConfig
metadata:
  name: mlserver-hostpath
  namespace: '{{ .Release.Namespace }}'
spec:
  podSpec:
    containers:
    - image: '{{ .Values.serverConfig.rclone.image.registry }}/{{ .Values.serverConfig.rclone.image.repository
        }}:{{ .Values.serverConfig.rclone.image.tag }}'
      imagePullPolicy: '{{ .Values.serverConfig.rclone.image.pullPolicy }}'
      lifecycle:
        preStop:
          httpGet:
            path: terminate
            port: 9007
      name: rclone
      ports:
      - containerPort: 5572
        name: rclone
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        tcpSocket:
          port: 5572
        timeoutSeconds: 1
      resources:
        limits:
          memory: '{{ .Values.serverConfig.rclone.resources.memory }}'
        requests:
          cpu: '{{ .Values.serverConfig.rclone.resources.cpu }}'
          memory: '{{ .Values.serverConfig.rclone.resources.memory }}'
      volumeMounts:
      - mountPath: /mnt/agent
        name: mlserver-models
      - mountPath: /mnt/repo
        name: model-repo
    - args:
      - --tracing-config-path=/mnt/tracing/tracing.json
      command:
      - /bin/agent
      env:
      - name: SELDON_SERVER_CAPABILITIES
        value: '{{ .Values.serverConfig.mlserver.serverCapabilities }}'
      - name: SELDON_MODEL_INFERENCE_LAG_THRESHOLD
        value: '{{ .Values.serverConfig.agent.modelInferenceLagThreshold }}'
      - name: SELDON_MODEL_INACTIVE_SECONDS_THRESHOLD
        value: '{{ .Values.serverConfig.agent.modelInactiveSecondsThreshold }}'
      - name: SELDON_SCALING_STATS_PERIOD_SECONDS
        value: '{{ .Values.serverConfig.agent.scalingStatsPeriodSeconds }}'
      - name: SELDON_OVERCOMMIT_PERCENTAGE
        value: '{{ .Values.serverConfig.agent.overcommitPercentage }}'
      - name: CONTROL_PLANE_SECURITY_PROTOCOL
        value: '{{ .Values.security.controlplane.protocol }}'
      - name: CONTROL_PLANE_CLIENT_TLS_SECRET_NAME
        value: '{{ .Values.security.controlplane.ssl.client.secret }}'
      - name: CONTROL_PLANE_SERVER_TLS_SECRET_NAME
        value: '{{ .Values.security.controlplane.ssl.client.serverValidationSecret
          }}'
      - name: CONTROL_PLANE_CLIENT_TLS_KEY_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.keyPath }}'
      - name: CONTROL_PLANE_CLIENT_TLS_CRT_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.crtPath }}'
      - name: CONTROL_PLANE_CLIENT_TLS_CA_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.caPath }}'
      - name: CONTROL_PLANE_SERVER_TLS_CA_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.serverCaPath }}'
      - name: ENVOY_SECURITY_PROTOCOL
        value: '{{ .Values.security.envoy.protocol }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME
        value: '{{ .Values.security.envoy.ssl.upstream.server.secret }}'
      - name: ENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME
        value: '{{ .Values.security.envoy.ssl.upstream.server.clientValidationSecret
          }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_KEY_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.keyPath }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_CRT_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.crtPath }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.caPath }}'
      - name: ENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.clientCaPath }}'
      - name: SELDON_SERVER_HTTP_PORT
        value: "9000"
      - name: SELDON_SERVER_GRPC_PORT
        value: "9500"
      - name: SELDON_REVERSE_PROXY_HTTP_PORT
        value: "9001"
      - name: SELDON_REVERSE_PROXY_GRPC_PORT
        value: "9501"
      - name: SELDON_SCHEDULER_HOST
        value: seldon-scheduler
      - name: SELDON_SCHEDULER_PORT
        value: "9005"
      - name: SELDON_SCHEDULER_TLS_PORT
        value: "9055"
      - name: SELDON_METRICS_PORT
        value: "9006"
      - name: SELDON_DRAINER_PORT
        value: "9007"
      - name: AGENT_TLS_SECRET_NAME
        value: ""
      - name: AGENT_TLS_FOLDER_PATH
        value: ""
      - name: SELDON_SERVER_TYPE
        value: mlserver
      - name: SELDON_ENVOY_HOST
        value: seldon-mesh
      - name: SELDON_ENVOY_PORT
        value: "80"
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: MEMORY_REQUEST
        valueFrom:
          resourceFieldRef:
            containerName: mlserver
            resource: requests.memory
      image: '{{ .Values.serverConfig.agent.image.registry }}/{{ .Values.serverConfig.agent.image.repository
        }}:{{ .Values.serverConfig.agent.image.tag }}'
      imagePullPolicy: '{{ .Values.serverConfig.agent.image.pullPolicy }}'
      lifecycle:
        preStop:
          httpGet:
            path: terminate
            port: 9007
      name: agent
      ports:
      - containerPort: 9501
        name: grpc
        protocol: TCP
      - containerPort: 9001
        name: http
        protocol: TCP
      - containerPort: 9006
        name: metrics
        protocol: TCP
      resources:
        limits:
          memory: '{{ .Values.serverConfig.agent.resources.memory }}'
        requests:
          cpu: '{{ .Values.serverConfig.agent.resources.cpu }}'
          memory: '{{ .Values.serverConfig.agent.resources.memory }}'
      volumeMounts:
      - mountPath: /mnt/agent
        name: mlserver-models
      - mountPath: /mnt/config
        name: config-volume
      - mountPath: /mnt/tracing
        name: tracing-config-volume
    - env:
      - name: MLSERVER_HTTP_PORT
        value: "9000"
      - name: MLSERVER_GRPC_PORT
        value: "9500"
      - name: MLSERVER_MODELS_DIR
        value: /mnt/agent/models
      - name: MLSERVER_MODEL_PARALLEL_WORKERS
        value: "1"
      - name: MLSERVER_LOAD_MODELS_AT_STARTUP
        value: "false"
      - name: MLSERVER_GRPC_MAX_MESSAGE_LENGTH
        value: "1048576000"
      image: '{{ .Values.serverConfig.mlserver.image.registry }}/{{ .Values.serverConfig.mlserver.image.repository
        }}:{{ .Values.serverConfig.mlserver.image.tag }}'
      imagePullPolicy: '{{ .Values.serverConfig.mlserver.image.pullPolicy }}'
      lifecycle:
        preStop:
          httpGet:
            path: terminate
            port: 9007
      livenessProbe:
        httpGet:
          path: /v2/health/live
          port: server-http
      name: mlserver
      ports:
      - containerPort: 9500
        name: server-grpc
        protocol: TCP
      - containerPort: 9000
        name: server-http
        protocol: TCP
      readinessProbe:
        httpGet:
          path: /v2/health/live
          port: server-http
        initialDelaySeconds: 5
        periodSeconds: 5
      resources:
        limits:
          memory: '{{ .Values.serverConfig.mlserver.resources.memory }}'
        requests:
          cpu: '{{ .Values.serverConfig.mlserver.resources.cpu }}'
          memory: '{{ .Values.serverConfig.mlserver.resources.memory }}'
      startupProbe:
        failureThreshold: 10
        httpGet:
          path: /v2/health/live
          port: server-http
        periodSeconds: 10
      volumeMounts:
      - mountPath: /mnt/agent
        name: mlserver-models
        readOnly: true
      - mountPath: /mnt/certs
        name: downstream-ca-certs
        readOnly: true
    securityContext: {{- toYaml .Values.serverConfig.securityContext
      | nindent 6 }}
    serviceAccountName: seldon-server
    terminationGracePeriodSeconds: {{ .Values.serverConfig.terminationGracePeriodSeconds
      }}
    volumes:
    - name: downstream-ca-certs
      secret:
        optional: true
        secretName: '{{ .Values.security.envoy.ssl.downstream.client.serverValidationSecret
          }}'
    - configMap:
        name: seldon-agent
      name: config-volume
    - configMap:
        name: seldon-tracing
      name: tracing-config-volume
    - hostPath:
        path: "/repo"
      name: model-repo
  volumeClaimTemplates:
  - name: mlserver-models
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: '{{ .Values.serverConfig.mlserver.modelVolumeStorage }}'
---
apiVersion: mlops.seldon.io/v1alpha1
kind: ServerConfig
metadata:
  name: triton-hostpath
  namespace: '{{ .Release.Namespace }}'
spec:
  podSpec:
    containers:
    - image: '{{ .Values.serverConfig.rclone.image.registry }}/{{ .Values.serverConfig.rclone.image.repository
        }}:{{ .Values.serverConfig.rclone.image.tag }}'
      imagePullPolicy: '{{ .Values.serverConfig.rclone.image.pullPolicy }}'
      lifecycle:
        preStop:
          httpGet:
            path: terminate
            port: 9007
      name: rclone
      ports:
      - containerPort: 5572
        name: rclone
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        initialDelaySeconds: 5
        periodSeconds: 5
        successThreshold: 1
        tcpSocket:
          port: 5572
        timeoutSeconds: 1
      resources:
        limits:
          memory: '{{ .Values.serverConfig.rclone.resources.memory }}'
        requests:
          cpu: '{{ .Values.serverConfig.rclone.resources.cpu }}'
          memory: '{{ .Values.serverConfig.rclone.resources.memory }}'
      volumeMounts:
      - mountPath: /mnt/agent
        name: triton-models
      - mountPath: /mnt/repo
        name: model-repo
    - args:
      - --tracing-config-path=/mnt/tracing/tracing.json
      command:
      - /bin/agent
      env:
      - name: SELDON_SERVER_CAPABILITIES
        value: '{{ .Values.serverConfig.triton.serverCapabilities }}'
      - name: SELDON_MODEL_INFERENCE_LAG_THRESHOLD
        value: '{{ .Values.serverConfig.agent.modelInferenceLagThreshold }}'
      - name: SELDON_MODEL_INACTIVE_SECONDS_THRESHOLD
        value: '{{ .Values.serverConfig.agent.modelInactiveSecondsThreshold }}'
      - name: SELDON_SCALING_STATS_PERIOD_SECONDS
        value: '{{ .Values.serverConfig.agent.scalingStatsPeriodSeconds }}'
      - name: SELDON_OVERCOMMIT_PERCENTAGE
        value: '{{ .Values.serverConfig.agent.overcommitPercentage }}'
      - name: CONTROL_PLANE_SECURITY_PROTOCOL
        value: '{{ .Values.security.controlplane.protocol }}'
      - name: CONTROL_PLANE_CLIENT_TLS_SECRET_NAME
        value: '{{ .Values.security.controlplane.ssl.client.secret }}'
      - name: CONTROL_PLANE_SERVER_TLS_SECRET_NAME
        value: '{{ .Values.security.controlplane.ssl.client.serverValidationSecret
          }}'
      - name: CONTROL_PLANE_CLIENT_TLS_KEY_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.keyPath }}'
      - name: CONTROL_PLANE_CLIENT_TLS_CRT_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.crtPath }}'
      - name: CONTROL_PLANE_CLIENT_TLS_CA_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.caPath }}'
      - name: CONTROL_PLANE_SERVER_TLS_CA_LOCATION
        value: '{{ .Values.security.controlplane.ssl.client.serverCaPath }}'
      - name: ENVOY_SECURITY_PROTOCOL
        value: '{{ .Values.security.envoy.protocol }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_SECRET_NAME
        value: '{{ .Values.security.envoy.ssl.upstream.server.secret }}'
      - name: ENVOY_UPSTREAM_CLIENT_TLS_SECRET_NAME
        value: '{{ .Values.security.envoy.ssl.upstream.server.clientValidationSecret
          }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_KEY_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.keyPath }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_CRT_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.crtPath }}'
      - name: ENVOY_UPSTREAM_SERVER_TLS_CA_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.caPath }}'
      - name: ENVOY_UPSTREAM_CLIENT_TLS_CA_LOCATION
        value: '{{ .Values.security.envoy.ssl.upstream.server.clientCaPath }}'
      - name: SELDON_SERVER_HTTP_PORT
        value: "9000"
      - name: SELDON_SERVER_GRPC_PORT
        value: "9500"
      - name: SELDON_REVERSE_PROXY_HTTP_PORT
        value: "9001"
      - name: SELDON_REVERSE_PROXY_GRPC_PORT
        value: "9501"
      - name: AGENT_TLS_SECRET_NAME
        value: ""
      - name: AGENT_TLS_FOLDER_PATH
        value: ""
      - name: SELDON_SCHEDULER_HOST
        value: seldon-scheduler
      - name: SELDON_SCHEDULER_PORT
        value: "9005"
      - name: SELDON_METRICS_PORT
        value: "9006"
      - name: SELDON_DRAINER_PORT
        value: "9007"
      - name: SELDON_SERVER_TYPE
        value: triton
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: MEMORY_REQUEST
        valueFrom:
          resourceFieldRef:
            containerName: triton
            resource: requests.memory
      image: '{{ .Values.serverConfig.agent.image.registry }}/{{ .Values.serverConfig.agent.image.repository
        }}:{{ .Values.serverConfig.agent.image.tag }}'
      imagePullPolicy: '{{ .Values.serverConfig.agent.image.pullPolicy }}'
      lifecycle:
        preStop:
          httpGet:
            path: terminate
            port: 9007
      name: agent
      ports:
      - containerPort: 9501
        name: grpc
        protocol: TCP
      - containerPort: 9001
        name: http
        protocol: TCP
      - containerPort: 9006
        name: metrics
        protocol: TCP
      resources:
        limits:
          memory: '{{ .Values.serverConfig.agent.resources.memory }}'
        requests:
          cpu: '{{ .Values.serverConfig.agent.resources.cpu }}'
          memory: '{{ .Values.serverConfig.agent.resources.memory }}'
      volumeMounts:
      - mountPath: /mnt/agent
        name: triton-models
      - mountPath: /mnt/config
        name: config-volume
      - mountPath: /mnt/tracing
        name: tracing-config-volume
    - args:
      - --model-repository=$(SERVER_MODELS_DIR)
      - --http-port=$(SERVER_HTTP_PORT)
      - --grpc-port=$(SERVER_GRPC_PORT)
      - --log-verbose=1
      - --model-control-mode=explicit
      - --backend-config=python,shm-default-byte-size=16777216
      command:
      - /opt/tritonserver/bin/tritonserver
      env:
      - name: SERVER_HTTP_PORT
        value: "9000"
      - name: SERVER_GRPC_PORT
        value: "9500"
      - name: SERVER_MODELS_DIR
        value: /mnt/agent/models
      image: '{{ .Values.serverConfig.triton.image.registry }}/{{ .Values.serverConfig.triton.image.repository
        }}:{{ .Values.serverConfig.triton.image.tag }}'
      imagePullPolicy: '{{ .Values.serverConfig.triton.image.pullPolicy }}'
      lifecycle:
        preStop:
          httpGet:
            path: terminate
            port: 9007
      livenessProbe:
        httpGet:
          path: /v2/health/live
          port: server-http
      name: triton
      ports:
      - containerPort: 9500
        name: server-grpc
        protocol: TCP
      - containerPort: 9000
        name: server-http
        protocol: TCP
      - containerPort: 8002
        name: server-metrics
      readinessProbe:
        httpGet:
          path: /v2/health/live
          port: server-http
        initialDelaySeconds: 5
        periodSeconds: 5
      resources:
        limits:
          memory: '{{ .Values.serverConfig.triton.resources.memory }}'
        requests:
          cpu: '{{ .Values.serverConfig.triton.resources.cpu }}'
          memory: '{{ .Values.serverConfig.triton.resources.memory }}'
      startupProbe:
        failureThreshold: 10
        httpGet:
          path: /v2/health/live
          port: server-http
        periodSeconds: 10
      volumeMounts:
      - mountPath: /mnt/agent
        name: triton-models
        readOnly: true
      - mountPath: /dev/shm
        name: dshm
        readOnly: false
    securityContext: {{- toYaml .Values.serverConfig.securityContext
      | nindent 6 }}
    serviceAccountName: seldon-server
    terminationGracePeriodSeconds: {{ .Values.serverConfig.terminationGracePeriodSeconds
      }}
    volumes:
    - configMap:
        name: seldon-agent
      name: config-volume
    - configMap:
        name: seldon-tracing
      name: tracing-config-volume
    - emptyDir:
        medium: Memory
        sizeLimit: 256Mi
      name: dshm
    - hostPath:
        path: "/repo"
      name: model-repo 
  volumeClaimTemplates:
  - name: triton-models
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: '{{ .Values.serverConfig.triton.modelVolumeStorage }}'
